# Runs Pimcore tests. Typically these are run on Pull Requests, in which case you can trigger this workflow as follows:
# on:
#   pull_request:
#     types: [opened, reopened, synchronize]
# jobs:
#   unit-tests-on-pr:
#     uses: TorqIT/pimcore-github-actions-workflows/.github/workflows/ci-run-tests.yml@v6
# 

name: Run tests

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
        description: Optional self-hosted runner for this workflow (see https://github.com/TorqIT/pimcore-github-actions-workflows#self-hosted-runners)
      PHP_DOCKERFILE:
        required: false
        type: string
        default: "./.docker/Dockerfile"
        description: "Path to Dockerfile for building PHP image"
      PHP_DOCKERFILE_TARGET:
        required: false
        type: string
        default: "php"
        description: "Target within Dockerfile that will build the PHP image"

jobs:
  tests:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}

    env:
      TAG: ${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/pimcore-github-actions-workflows
          file-name: ci-run-tests.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/pimcore-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1
      
      - name: Build test container
        run: |
          PHP_DOCKERFILE=${{ inputs.PHP_DOCKERFILE }} PHP_DOCKERFILE_TARGET=${{ inputs.PHP_DOCKERFILE_TARGET }} docker compose -f ./reusable-workflow/scripts/run-tests/docker-compose.yml build tests
          
      - name: Run tests
        timeout-minutes: 10 # This occasionally hangs when installing Pimcore for an unknown reason, so we arbitrarily kill after 10 minutes
        run: |
          docker compose -f ./reusable-workflow/scripts/run-tests/docker-compose.yml run tests

      - name: Bring down the containers
        if: always()
        run: |
          docker compose -f  ./reusable-workflow/scripts/run-tests/docker-compose.yml down
