# Builds, tags, and pushes Pimcore Docker images to an Azure Container Registry, applies Azure infrastrcuture changes, and deploys new revisions to Container Apps.
# This workflow assumes an architecture similar to the one in https://github.com/TorqIT/pimcore-azure-provisioning - namely, an Azure Container Registry, an init Container App Job, a PHP Container App, and a supervisord Container App.
#
# Invoke this workflow in your project's workflow as follows:
# on:
#   push:
#     branches: [main, develop]
# jobs:
#   deploy-to-azure-container-apps:
#     uses: TorqIT/pimcore-github-actions-workflows/.github/workflows/deploy-to-azure-container-apps.yml@v7
#     permissions:
#       contents: read
#       actions: read
#     with:
#       ENVIRONMENT: ${{ github.ref_name == 'main' && 'production' || 'test' }}
#     secrets:
#       SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
#       SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
#

name: Azure Container Apps Deployment

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
        description: "The GitHub Environment in which to run the workflow"
      RUNNER:
        required: true
        type: string
        description: Self-hosted runner for this workflow (see https://github.com/TorqIT/pimcore-github-actions-workflows#self-hosted-runners)
      NPM_BUILD:
        required: false
        type: boolean
        description: "Whether an NPM build should be run prior to building the PHP image"
      NPM_RUN_CMD:
        required: false
        type: string
        description: "The NPM command that should be run prior to building the PHP image"
      NPM_SPA:
        required: false
        type: boolean
        description: "Whether the NPM build results in a single-page application"
      SPA_TWIG:
        required: false
        type: string
        default: "default/default.html.twig"
        description: "The path to the Twig file where the result of the NPM single-page application build should be copied"
      SUBMODULES:
        required: false
        type: boolean
        default: false
        description: "Whether to clone submodules when cloning the project repository"
      PIMCORE_ROOT:
        required: false
        type: string
        default: "."
        description: "The path (relative to the project's root) in which the Pimcore files are stored (e.g. config, src, etc)"
      CONTAINER_REGISTRY:
        required: true
        type: string
        description: "Docker Container Registry name"
      DOCKER_COMPOSE_FILE:
        required: true
        type: string
        description: "The name of the environment-specific Docker Compose file to use when deploying and running services"
      ENV_FILE:
        required: true
        type: string
        description: "Environment-specific .env file to be used when running Docker containers (assumed to be at the project root)"
      INIT:
        required: false
        type: boolean
        default: true
        description: "Whether to build and deploy an init service"
      INIT_IMAGE:
        required: false
        type: string
        default: "init"
        description: "Name of the init image"
      INIT_DOCKERFILE:
        required: false
        type: string
        default: ".docker/Dockerfile"
        description: "The path (relative to the project's root) of the Dockerfile used to build the init image"
      INIT_DOCKER_TARGET:
        required: false
        type: string
        default: "init"
        description: "The Docker target to use when building the init image"
      PHP_IMAGE:
        required: false
        type: string
        default: "php"
        description: "Name of the PHP Pimcore image"
      PHP_IMAGE_TAG:
        required: false
        type: string
        description: "Custom tag for built PHP image"
      PHP_DOCKERFILE:
        required: false
        type: string
        default: ".docker/Dockerfile"
        description: "The path (relative to the project's root) of the Dockerfile used to build the PHP image"
      PHP_DOCKER_TARGET:
        required: false
        type: string
        default: "php"
        description: "The Docker target to use when building the PHP image"
      PHP_SERVICE:
        required: false
        type: string
        default: "php"
        description: "The name of the PHP service in Docker Compose to run"
      SUPERVISORD_IMAGE:
        required: false
        type: string
        default: "supervisord"
        description: "Name of the supervisord Pimcore image"
      SUPERVISORD_IMAGE_TAG:
        required: false
        type: string
        description: "Custom tag for built supervisord image"
      SUPERVISORD_DOCKERFILE:
        required: false
        type: string
        default: ".docker/Dockerfile"
        description: "The path (relative to the project's root) of the Dockerfile used to build the supervisord image"
      SUPERVISORD_TARGET:
        required: false
        type: string
        default: "supervisord"
        description: "The Docker target to use when building the supervisord image"
      SUPERVISORD_SERVICE:
        required: false
        type: string
        default: "supervisord"
        description: "The name of the supervisord service in Docker Compose to run"
      BUILD_TIME_ARGS:
        type: string
        required: false
        description: "A JSON array of args required at build-time (see above for example format)"
      RUN_TIME_VARIABLES:
        type: string
        required: false
        description: "A JSON array of variables required at run-time (see above for example format)"
      NON_PIMCORE_SERVICES:
        type: string
        required: false
        description: "Space separated list of non-Pimcore Docker Compose services to start on deployment (e.g. Redis, database, Elasticsearch)"

    secrets:
      CALLER_GITHUB_TOKEN:
        required: true
        description: GitHub token from the caller repository
      BUILD_TIME_SECRETS:
        required: false
        description: A JSON array of secrets required at build-time (see above for example format)
      RUN_TIME_SECRETS:
        required: false
        description: A JSON array of secret environment variables required at run-time (see above for example format)
      RECAPTCHA_CLIENT_KEY:
        required: false
        description: A client key used when building NPM frontends that require ReCAPTCHA
      SLACK_WORKFLOW_STATUS_WEBHOOK_URL:
        required: false
        description: Slack webhook URL to send workflow results to

jobs:
  build-and-push-images:
    name: Build and push Pimcore Docker images
    runs-on: "ubuntu-latest"
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.SUBMODULES }}
          fetch-depth: 0

      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/pimcore-github-actions-workflows
          file-name: deploy-to-vm-docker-compose.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/pimcore-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Set up Docker
        uses: ./reusable-workflow/.github/actions/setup-docker
        with:
          CONTAINER_REGISTRY: ${{ inputs.CONTAINER_REGISTRY }}
          CONTAINER_REGISTRY_USERNAME: ${{ github.actor }}
          CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CALLER_GITHUB_TOKEN }}

      - name: Build and push init image
        uses: ./reusable-workflow/.github/actions/build-and-push-pimcore-image
        if: ${{ inputs.INIT }}
        with:
          DOCKERFILE_PATH: ${{ inputs.INIT_DOCKERFILE }}
          DOCKERFILE_TARGET: ${{ inputs.INIT_DOCKER_TARGET }}
          PIMCORE_ROOT: ${{ inputs.PIMCORE_ROOT }}
          PIMCORE_ENTERPRISE_TOKEN: ${{ secrets.PIMCORE_ENTERPRISE_TOKEN }}
          TORQ_GITHUB_TOKEN: ${{ secrets.TORQ_GITHUB_TOKEN }}
          BUILD_SECRETS: ${{ secrets.BUILD_TIME_SECRETS }}
          CACHE_FROM: type=gha
          CACHE_TO: type=gha,mode=min
          TAGS: |
            ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.INIT_IMAGE || 'init' }}:latest,
            ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.INIT_IMAGE || 'init' }}:${{ github.run_id }}

      - name: Build and push PHP image
        uses: ./reusable-workflow/.github/actions/build-and-push-pimcore-image
        with:
          DOCKERFILE_PATH: ${{ inputs.PHP_DOCKERFILE }}
          DOCKERFILE_TARGET: ${{ inputs.PHP_DOCKER_TARGET }}
          PIMCORE_ROOT: ${{ inputs.PIMCORE_ROOT }}
          PIMCORE_ENTERPRISE_TOKEN: ${{ secrets.PIMCORE_ENTERPRISE_TOKEN }}
          TORQ_GITHUB_TOKEN: ${{ secrets.TORQ_GITHUB_TOKEN }}
          BUILD_SECRETS: ${{ secrets.BUILD_TIME_SECRETS }}
          NPM_BUILD: ${{ inputs.NPM_BUILD }}
          RECAPTCHA_CLIENT_KEY: ${{ secrets.RECAPTCHA_CLIENT_KEY }}
          NPM_SPA: ${{ inputs.NPM_SPA }}
          SPA_TWIG: ${{ inputs.SPA_TWIG }}
          NPM_RUN_CMD: ${{ inputs.NPM_RUN_CMD }}
          TAGS: |
            ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.PHP_IMAGE || 'php' }}:latest,
            ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.PHP_IMAGE || 'php' }}:${{ github.run_id }}

      - name: Build and push supervisord image
        uses: ./reusable-workflow/.github/actions/build-and-push-pimcore-image
        with:
          DOCKERFILE_PATH: ${{ inputs.SUPERVISORD_DOCKERFILE }}
          DOCKERFILE_TARGET: ${{ inputs.SUPERVISORD_TARGET }}
          PIMCORE_ROOT: ${{ inputs.PIMCORE_ROOT }}
          PIMCORE_ENTERPRISE_TOKEN: ${{ secrets.PIMCORE_ENTERPRISE_TOKEN }}
          TORQ_GITHUB_TOKEN: ${{ secrets.TORQ_GITHUB_TOKEN }}
          BUILD_SECRETS: ${{ secrets.BUILD_TIME_SECRETS }}
          TAGS: |
            ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.SUPERVISORD_IMAGE || 'supervisord' }}:latest,
            ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.SUPERVISORD_IMAGE || 'supervisord' }}:${{ github.run_id }}

  deploy-containers:
    name: Deploy new container versions via Docker Compose
    runs-on: ${{ inputs.RUNNER }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs:
      - build-and-push-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/pimcore-github-actions-workflows
          file-name: deploy-to-vm-docker-compose.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/pimcore-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Set up Docker
        uses: ./reusable-workflow/.github/actions/setup-docker
        with:
          CONTAINER_REGISTRY: ${{ inputs.CONTAINER_REGISTRY }}
          CONTAINER_REGISTRY_USERNAME: ${{ github.actor }}
          CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env file
        run: |
          echo "\n >> .env"
          echo "${{ secrets.RUN_TIME_SECRETS }}" | jq -r 'to_entries | .[] | .key + "=" + .value' >> ${{ inputs.ENV_FILE }}

      # TODO mount secrets as Docker secrets too

      - name: Pull latest images
        run: |
          docker compose \
            -f docker-compose.yml -f ${{ inputs.DOCKER_COMPOSE_FILE }} \
            pull ${{ inputs.PHP_SERVICE }} ${{ inputs.SUPERVISORD_SERVICE }}

      - name: Get external volumes from ${{ inputs.DOCKER_COMPOSE_FILE }}
        uses: mikefarah/yq@master
        id: get-external-volumes
        with:
          cmd: yq '.volumes | with_entries(select(.value.external == true)) | keys' '${{ inputs.DOCKER_COMPOSE_FILE}}'

      - name: Ensure external volumes exist
        run: |
          external_volumes=$(echo "${{ steps.get-external-volumes.outputs.result }}" | tr -d '[],"')
          for volume in $external_volumes; do
            if ! docker volume inspect "$volume" &> /dev/null; then
              echo "Volume $volume does not exist. Creating..."
              docker volume create "$volume"
            else
              echo "Volume $volume exists."
            fi
          done

      - name: Get external networks from ${{ inputs.DOCKER_COMPOSE_FILE }}
        uses: mikefarah/yq@master
        id: get-external-networks
        with:
          cmd: yq '.networks | with_entries(select(.value.external == true)) | keys' '${{ inputs.DOCKER_COMPOSE_FILE}}'

      - name: Ensure external networks exist
        run: |
          external_networks=$(echo "${{ steps.get-external-networks.outputs.result }}" | tr -d '[],"')
          for network in $external_networks; do
            if ! docker network inspect "$network" &> /dev/null; then
              echo "Network $network does not exist. Creating..."
              docker network create "$network"
            else
              echo "Network $network exists."
            fi
          done

      # TODO pull and run init if implemented

      - name: Start generic services outside of blue/green (e.g. Redis, database, Elasticsearch, etc)
        run: |
          # Start the DB, Redis, Elasticsearch, RabbitMQ and Kibana containers separately so they are not affected by blue/green deployments
          docker-compose \
              -f docker-compose.yml -f ${{ inputs.DOCKER_COMPOSE_FILE }} \
              up -d ${{ inputs.NON_PIMCORE_SERVICES }}

      - name: Perform blue/green deployment of PHP and supervisord containers
        run: |
          if [ "$(docker ps -f name=blue -q)" ]; then
              NEW_DEPLOYMENT="green"
              OLD_DEPLOYMENT="blue"
          else
              NEW_DEPLOYMENT="blue"
              OLD_DEPLOYMENT="green"
          fi

          echo "Starting "$NEW_DEPLOYMENT" containers..."
          docker-compose \
              --project-name=$NEW_DEPLOYMENT \
              --env-file .env \
              -f docker-compose.yml -f ${{ inputs.DOCKER_COMPOSE_FILE }} \
              up -d ${{ inputs.PHP_SERVICE }} ${{ inputs.SUPERVISORD_SERVICE }}

          echo "Waiting for $NEW_DEPLOYMENT deployment to be ready..."
          set +e
          docker-compose \
              --project-name=$NEW_DEPLOYMENT \
              -f docker-compose.yml -f ${{ inputs.DOCKER_COMPOSE_FILE }} \
              exec -T ${{ inputs.PHP_SERVICE }} \
                  wget \
                    --verbose \
                    --content-on-error \
                    --retry-on-http-error=429,503,502,504 \
                    -T 3 -t 100 \
                    --retry-connrefused \
                    -O /dev/null \
                    localhost
          DEPLOY_STATUS=$?
          set -e

          if [[ $DEPLOY_STATUS == 0 ]]; then
              echo "Stopping "$OLD_DEPLOYMENT" containers..."
              docker-compose \
                  --project-name=$OLD_DEPLOYMENT \
                  -f docker-compose.yml -f ${{ inputs.DOCKER_COMPOSE_FILE }} \
                  rm --stop --force ${{ inputs.PHP_SERVICE }} ${{ inputs.SUPERVISORD_SERVICE }}
          else
              echo "Error bringing up new containers - stopping $NEW_DEPLOYMENT containers..."
              docker-compose \
                  --project-name=$NEW_DEPLOYMENT \
                  -f docker-compose.yml -f ${{ inputs.DOCKER_COMPOSE_FILE }} \
                  rm --stop --force ${{ inputs.PHP_SERVICE }} ${{ inputs.SUPERVISORD_SERVICE }}
              exit 1
          fi

  workflow-failure-notification:
    name: Send workflow failure notification to Slack channel
    runs-on: "ubuntu-latest"
    environment: ${{ inputs.ENVIRONMENT }}
    if: failure()
    needs:
      - build-and-push-images
      - deploy-containers
    steps:
      - id: check-webhook-url
        # Hacky workaround to get around the fact that we cannot reference secrets in a conditional
        run: |
          if [ "${{ secrets.SLACK_WORKFLOW_STATUS_WEBHOOK_URL }}" != '' ]; then
            echo "Slack webhook URL is defined"
            echo "slackWebhookDefined=true" >> $GITHUB_OUTPUT;
          else
            echo "Slack webhook URL is not defined"
            echo "slackWebhookDefined=false" >> $GITHUB_OUTPUT;
          fi

      - name: Send job status to Slack
        uses: slackapi/slack-github-action@v2
        if: steps.check-webhook-url.outputs.slackWebhookDefined == 'true'
        with:
          webhook: ${{ secrets.SLACK_WORKFLOW_STATUS_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*GitHub deployment failure*"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Deployment to ${{ inputs.ENVIRONMENT }} for ${{ github.repository }}* failed :x:\n\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
