name: Build, tag, and push Docker images, and deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
      ENVIRONMENT:
        required: true
        type: string
      SUBMODULES:
        required: false
        type: boolean
        default: false
      SHOPWARE_ROOT:
        required: false
        type: string
        default: 'src'
      DOCKERFILE_PATH:
        required: false
        type: string
        default: '.docker/Dockerfile'

    secrets:
      SERVICE_PRINCIPAL_PASSWORD:
        required: true
      DATABASE_PASSWORD:
        required: true

jobs:
  build-and-deploy:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ vars.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Copy and write relevant files for deploy
        run: |
          cp .github/.env.dev src/.env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> ${{ inputs.SHOPWARE_ROOT }}/.env
          echo "DATABASE_URL=mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}" ${{ inputs.SHOPWARE_ROOT }}/.env
          cp src/config/packages/dev-deploy/*.yaml ${{ inputs.SHOPWARE_ROOT }}/config/packages/dev

      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ vars.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ inputs.DOCKERFILE_PATH }}
          target: init
          tags: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_INIT_IMAGE }}:latest,
                ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_INIT_IMAGE }}:${{ github.run_id }}
      
      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Run init (migration and seeding) Container App Job
        run: |
          echo Creating new revision of ${{ vars.INIT_CONTAINER_APP_JOB }} Container App Job
          az containerapp job update \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:init-${{ github.run_id }}

          echo Running init Container App Job...
          az containerapp job start \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }}

          executionName=$(az containerapp job execution list \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            | jq -r '.[] | select(.properties.status | contains("Running")) | .name')
          echo Waiting for $executionName to finish...

          executionStatus=$(az containerapp job execution list \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          while [[ "$executionStatus" == "Running" ]]
          do
            echo Job execution $executionName is still running...
            sleep 5
            executionStatus=$(az containerapp job execution list \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
              | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          done

          if [[ "$executionStatus" == "Succeeded" ]]
          then
            echo "Execution $executionName succeeded!"
          else
            echo "Execution $executionName failed!"
            exit 1
          fi

      - name: Build and push latest Shopware image
        uses: docker/build-push-action@v6
        with:
            push: true
            cache-from: type=gha
            cache-to: type=gha,mode=max
            file: ${{ inputs.DOCKERFILE_PATH }}
            target: web
            tags: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:latest,
                  ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:${{ github.run_id }}

      - name: Create new revision of Shopware Container App
        run: |
          echo Creating new revision of Shopware container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_WEB_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}
          echo Ensuring 100% of traffic is set to the latest revision...
          az containerapp ingress traffic set \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_WEB_CONTAINER_APP }} \
            --revision-weight latest=100
  