name: Build, tag, and push Docker images, and deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
      NPM_BUILD:
        required: false
        type: boolean
      NPM_RUN_CMD:
        required: false
        type: string
      NPM_SPA:
        required: false
        type: boolean
      SPA_TWIG:
        required: false
        type: string
        default: "default/default.html.twig"
      ENVIRONMENT:
        required: true
        type: string
      SUBMODULES:
        required: false
        type: boolean
        default: false

    secrets:
      SERVICE_PRINCIPAL_ID:
        required: true
      SERVICE_PRINCIPAL_PASSWORD:
        required: true
      PIMCORE_ENTERPRISE_TOKEN:
        required: false
      ENCRYPTION_SECRET:
        required: false

jobs:
  build-php-fpm:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.SUBMODULES }}

      - uses: actions/setup-node@v3
        if: ${{ inputs.NPM_BUILD }}
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: pimcore-root/frontend/package-lock.json

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Perform npm build
        if: ${{ inputs.NPM_BUILD }}
        env:
          CI: "" # required to ensure warnings aren't treated as errors
        run: |
          cd pimcore-root/frontend
          npm ci --legacy-peer-deps
          npm run ${{ inputs.NPM_RUN_CMD }}
          if ${{ inputs.NPM_SPA }}
          then
            cd ../../
            mv pimcore-root/frontend/build/index.html pimcore-root/templates/${{ inputs.SPA_TWIG }}
            mv pimcore-root/frontend/build/* pimcore-root/public/
          fi

      - name: Copy in database.yaml file
        run: cp pimcore-root/config/db/database-dev-prod.yaml pimcore-root/config/database.yaml

      - name: Copy in flysystem.yaml file
        run: |
          if [ -e pimcore-root/config/flysystem/flysystem-dev-prod.yaml ]; then
            cp pimcore-root/config/flysystem/flysystem-dev-prod.yaml pimcore-root/config/packages/flysystem.yaml
          fi

      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ secrets.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push latest PHP-FPM image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/php-fpm/Dockerfile
          push: true
          tags: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:${{ github.run_id }}
          build-args: |
            PIMCORE_ENTERPRISE_TOKEN=${{ secrets.PIMCORE_ENTERPRISE_TOKEN }}
            ENCRYPTION_SECRET=${{ secrets.ENCRYPTION_SECRET }}

  build-supervisord:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy in database.yaml file
        run: cp pimcore-root/config/db/database-dev-prod.yaml pimcore-root/config/database.yaml

      - name: Copy in flysystem.yaml file
        run: |
          if [ -e pimcore-root/config/flysystem/flysystem-dev-prod.yaml ]; then
            cp pimcore-root/config/flysystem/flysystem-dev-prod.yaml pimcore-root/config/packages/flysystem.yaml
          fi

      - name: Log into Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ secrets.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push latest supervisord image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/supervisord/Dockerfile
          push: true
          tags:
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:${{ github.run_id }}
          build-args: |
            PIMCORE_ENTERPRISE_TOKEN=${{ secrets.PIMCORE_ENTERPRISE_TOKEN }}
            ENCRYPTION_SECRET=${{ secrets.ENCRYPTION_SECRET }}

  run-init-operations:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs: build-php-fpm
    steps:
      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ secrets.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Run init operations Container App Job
        run: |
          echo Running init operations Container App Job...
          az containerapp job start \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_OPERATIONS_CONTAINER_APP_JOB }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:${{ github.run_id }}

          executionName=$(az containerapp job execution list \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --name ${{ vars.INIT_OPERATIONS_CONTAINER_APP_JOB }} \
            | jq -r '.[] | select(.properties.status | contains("Running")) | .name')
          echo Waiting for $executionName to finish...

          executionStatus=$(az containerapp job execution list \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --name ${{ vars.INIT_OPERATIONS_CONTAINER_APP_JOB }} \
            | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          while [[ "$executionStatus" == "Running" ]]
          do
            echo Job execution $executionName is still running...
            sleep 5
            executionStatus=$(az containerapp job execution list \
              --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
              --name ${{ vars.INIT_OPERATIONS_CONTAINER_APP_JOB }} \
              | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          done

          if [[ "$executionStatus" == "Succeeded" ]]
          then
            echo "Execution $executionName succeeded!"
          else
            echo "Execution $executionName failed!"
            exit 1
          fi

  deploy-php-fpm:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs: [build-php-fpm, run-init-operations]
    steps:
      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ secrets.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Create new revision of PHP-FPM Container App
        run: |
          echo Creating new revision of PHP-FPM container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.PHP_FPM_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}
          echo Ensuring 100% of traffic is set to the latest revision...
          az containerapp ingress traffic set \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.PHP_FPM_CONTAINER_APP }} \
            --revision-weight latest=100

  deploy-supervisord:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs: [build-supervisord, run-init-operations]
    steps:
      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ secrets.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Create new revision of supervisord Container App
        run: |
          echo Creating new revision of supervisord container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SUPERVISORD_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}
