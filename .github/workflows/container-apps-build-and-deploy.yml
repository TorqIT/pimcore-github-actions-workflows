name: Build, tag, and push Docker images, and deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      NPM_BUILD:
        required: false
        type: boolean
      NPM_RUN_CMD:
        required: false
        type: string
    secrets:
      SERVICE_PRINCIPAL_ID:
        required: true
      SERVICE_PRINCIPAL_PASSWORD:
        required: true

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Determine environment based on branch
        id: branch-check
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "env=development" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "env=production" >> $GITHUB_OUTPUT
          fi
    outputs:
      env: ${{ steps.branch-check.outputs.env }}

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment]
    environment: ${{ needs.determine-environment.outputs.env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log into Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: '${{ secrets.SERVICE_PRINCIPAL_ID }}'
          password: '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Copy in database.yaml file
        run: cp pimcore-root/config/db/database-dev-prod.yaml pimcore-root/config/database.yaml

      - name: Perform npm build
        if: ${{ inputs.NPM_BUILD }}
        env:
          CI: "" # required to ensure warnings aren't treated as errors
        run: |
          cd frontend
          npm install --legacy-peer-deps
          npm run ${{ inputs.NPM_RUN_CMD }}
          cd ../
          mv frontend/build/index.html pimcore-root/templates/default/default.html.twig
          mv frontend/build/* pimcore-root/public/
      
      - name: Build and push latest PHP-FPM image
        uses: docker/build-push-action@v2
        with:
            context: .
            file: ./docker/php-fpm/Dockerfile
            push: true
            tags: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:latest,
                  ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:${{ github.run_id }}
            cache-from: type=gha
            cache-to: type=gha,mode=max

      - name: Build and push latest supervisord image
        uses: docker/build-push-action@v2
        with:
            context: .
            file: ./docker/supervisord/Dockerfile
            push: true
            tags: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:latest,
                  ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:${{ github.run_id }}
            cache-from: type=gha
            cache-to: type=gha,mode=max

      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ secrets.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Create new revision of PHP-FPM Container App
        run: |
          echo Creating new revision of PHP-FPM container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.PHP_FPM_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_FPM_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}

          echo Redirecting 100% of traffic to new revision...
          az containerapp ingress traffic set \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.PHP_FPM_CONTAINER_APP }} \
            --revision-weight latest=100
      
      - name: Create new revision of supervisord Container App
        run: |
          echo Creating new revision of supervisord container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SUPERVISORD_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}