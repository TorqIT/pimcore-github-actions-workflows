name: Build, tag, and push Docker images, and deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
      NPM_BUILD:
        required: false
        type: boolean
      NPM_RUN_CMD:
        required: false
        type: string
      ENVIRONMENT:
        required: true
        type: string
      SUBMODULES:
        required: false
        type: boolean
        default: false
      SHOPWARE_ROOT:
        required: false
        type: string
        default: 'src'

    secrets:
      SERVICE_PRINCIPAL_ID:
        required: true
      SERVICE_PRINCIPAL_PASSWORD:
        required: true

jobs:
  run-init-job:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ secrets.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_IMAGE }}:init-${{ github.run_id }}

      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ secrets.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'
      
      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Run init (migration and seeding) Container App Job
        run: |
          echo Creating new revision of ${{ vars.INIT_CONTAINER_APP_JOB }} Container App Job
          az containerapp job update \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_IMAGE }}:init-${{ github.run_id }}

          echo Running init Container App Job...
          az containerapp job start \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }}

          executionName=$(az containerapp job execution list \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            | jq -r '.[] | select(.properties.status | contains("Running")) | .name')
          echo Waiting for $executionName to finish...

          executionStatus=$(az containerapp job execution list \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          while [[ "$executionStatus" == "Running" ]]
          do
            echo Job execution $executionName is still running...
            sleep 5
            executionStatus=$(az containerapp job execution list \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
              | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          done

          if [[ "$executionStatus" == "Succeeded" ]]
          then
            echo "Execution $executionName succeeded!"
          else
            echo "Execution $executionName failed!"
            exit 1
          fi

  build-and-deploy-shopware:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs: 
      - run-init-job
    if: always()

    steps:
      # This is a workaround for the fact there is no way to do a conditional "needs"
      - name: Fail fast if necessary jobs failed
        if: ${{ needs.run-init-job.result == 'failure' }}
        run: exit 1

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.SUBMODULES }}

      - uses: actions/setup-node@v4
        if: ${{ inputs.NPM_BUILD }}
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ${{ inputs.PIMCORE_ROOT }}/frontend/package-lock.json

      - name: Cache node modules
        if: ${{ inputs.NPM_BUILD }}
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Perform npm build
        if: ${{ inputs.NPM_BUILD }}
        env:
          CI: "" # required to ensure warnings aren't treated as errors
        run: |
          npm --prefix ${{ inputs.PIMCORE_ROOT }}/frontend ci --legacy-peer-deps
          npm --prefix ${{ inputs.PIMCORE_ROOT }}/frontend run ${{ inputs.NPM_RUN_CMD }}
          if ${{ inputs.NPM_SPA }}
          then
            mv ${{ inputs.PIMCORE_ROOT }}/frontend/build/index.html ${{ inputs.PIMCORE_ROOT }}/templates/${{ inputs.SPA_TWIG }}
            mv ${{ inputs.PIMCORE_ROOT }}/frontend/build/* ${{ inputs.PIMCORE_ROOT }}/public/
          fi

      - name: Copy in flysystem.yaml file
        run: |
          if [ -e ${{ inputs.PIMCORE_ROOT }}/config/flysystem/flysystem-dev-prod.yaml ]; then
            cp ${{ inputs.PIMCORE_ROOT }}/config/flysystem/flysystem-dev-prod.yaml ${{ inputs.PIMCORE_ROOT }}/config/packages/flysystem.yaml
          fi
          
      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: '${{ secrets.SERVICE_PRINCIPAL_ID }}'
          password: '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push latest Shopware image
        uses: docker/build-push-action@v6
        with:
            context: .
            file: Dockerfile
            push: true
            cache-from: type=gha
            cache-to: type=gha,mode=max
            tags: ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_IMAGE }}:latest,
                  ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_IMAGE }}:${{ github.run_id }}

      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ secrets.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Create new revision of Shopware Container App
        run: |
          echo Creating new revision of Shopware container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}
          echo Ensuring 100% of traffic is set to the latest revision...
          az containerapp ingress traffic set \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_CONTAINER_APP }} \
            --revision-weight latest=100
  