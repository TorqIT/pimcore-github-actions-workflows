name: Back up an Azure Database for MySQL flexible server to a Storage Account

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
        description: Optional self-hosted runner for this workflow (see https://github.com/TorqIT/shopware-github-actions-workflows#self-hosted-runners)
      ENVIRONMENT:
        required: true
        type: string
      AZURE_MARIADB:
        required: false
        type: boolean
        description: Set to true if backing up an Azure MariaDB server instead

    secrets:
      SERVICE_PRINCIPAL_ID:
        required: true
      SERVICE_PRINCIPAL_PASSWORD:
        required: true
      AZURE_MYSQL_PASSWORD:
        required: true  
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  back-up-db:
    name: Back up Azure MySQL database to a Storage Account
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/shopware-github-actions-workflows
          file-name: azure-mysql-backup.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/shopware-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Log in to Azure
        uses: ./reusable-workflow/.github/actions/azure-login
        with:
          SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          TENANT: ${{ vars.TENANT }}
          SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      - name: Add temporary network rule for this runner to database server and Storage Account firewalls
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            runnerIp=$(curl ipinfo.io/ip)
            echo "Adding temporary network rule for this runner ($runnerIp) to database server's firewall..."
            if [ -n "${{ inputs.AZURE_MARIADB }}" ] && [ "${{ inputs.AZURE_MARIADB }}" == "true" ]; then
              az mariadb server firewall-rule create \
                --server-name ${{ vars.AZURE_MYSQL_SERVER }} \
                --resource-group ${{ vars.RESOURCE_GROUP }} \
                --name allow-runner-ip \
                --start-ip-address $runnerIp \
                --end-ip-address $runnerIp
            else
              az mysql flexible-server firewall-rule create \
                --name ${{ vars.AZURE_MYSQL_SERVER }} \
                --resource-group ${{ vars.RESOURCE_GROUP }} \
                --rule-name allow-runner-ip \
                --start-ip-address $runnerIp \
                --end-ip-address $runnerIp \
                --verbose
            fi
            echo "Adding temporary network rule for this runner ($runnerIp) to Storage Account's firewall..."
            az storage account network-rule add \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --account-name ${{ vars.AZURE_DB_BACKUPS_STORAGE_ACCOUNT }} \
              --ip-address $runnerIp \
              --verbose

      - name: Perform a MySQL dump and save the result to Storage Account
        id: dump
        run: |
          set -e
          fileName=$(date -u +"%Y-%m-%dT%H:%M:%SZ").sql
          dbHost=$( [ "${{ inputs.AZURE_MARIADB }}" == "true" ] && echo "${{ vars.AZURE_MYSQL_SERVER }}.mariadb.database.azure.com" || echo "${{ vars.AZURE_MYSQL_SERVER }}.mysql.database.azure.com" )
          dbUser=$( [ "${{ inputs.AZURE_MARIADB }}" == "true" ] && echo "${{ vars.AZURE_MYSQL_USERNAME}}@$dbHost" || echo "${{ vars.AZURE_MYSQL_USERNAME}}" )
          echo Performing database dump...
          MYSQL_PWD="${{ secrets.AZURE_MYSQL_PASSWORD }}" \
            mysqldump \
            -h $dbHost \
            -u $dbUser \
            ${{ vars.AZURE_MYSQL_DATABASE || 'shopware' }} \
            > $fileName

          echo "fileName=$fileName" >> $GITHUB_OUTPUT
          fileSize=$(stat -c%s $fileName)
          echo "Dumped .sql file is $fileSize bytes"
          echo "fileSize=$fileSize" >> $GITHUB_OUTPUT
          if [ "$fileSize" -le 0 ]; then
            exit 1;
          fi

          echo "Sleep for 120 seconds to allow network rule to propagate to Storage Account..."
          sleep 120
          echo "Uploading dumped file to Storage Account..."
          az storage blob upload \
            --account-name ${{ vars.AZURE_DB_BACKUPS_STORAGE_ACCOUNT }} \
            --container-name ${{ vars.AZURE_DB_BACKUPS_STORAGE_ACCOUNT_CONTAINER || 'database' }} \
            --name $fileName \
            --file $fileName \
            --auth-mode login
          
      - name: Remove temporary network rule from database server firewall
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            if [ -n "${{ inputs.AZURE_MARIADB }}" ] && [ "${{ inputs.AZURE_MARIADB }}" == "true" ]; then
              az mariadb server firewall-rule delete \
                --server-name ${{ vars.AZURE_MYSQL_SERVER }} \
                --resource-group ${{ vars.RESOURCE_GROUP }} \
                --name allow-runner-ip \
                --yes
            else
              az mysql flexible-server firewall-rule delete \
                --resource-group ${{ vars.RESOURCE_GROUP }} \
                --name ${{ vars.AZURE_MYSQL_SERVER }} \
                --rule-name allow-runner-ip \
                --yes
            fi

      - name: Remove temporary network rule from Storage Account firewall
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            runnerIp=$(curl ipinfo.io/ip)
            az storage account network-rule remove \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --account-name ${{ vars.AZURE_DB_BACKUPS_STORAGE_ACCOUNT }} \
              --ip-address $runnerIp

      - name: Send job status to Slack
        if: always()
        uses: slackapi/slack-github-action@v2
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Azure MySQL Database backup job*"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Database backup job for ${{ github.repository }}*: ${{ job.status == 'success' && 'Success! :white_check_mark:' || 'Failed :x:' }}\n\nDumped file *${{ steps.dump.outputs.fileName }}* was *${{ steps.dump.outputs.fileSize }}* bytes\n\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          