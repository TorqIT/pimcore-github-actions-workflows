name: ''
description: ''
inputs:
  INIT_IMAGE:
    required: true
    description: ""
  INIT_CONTAINER_APP_JOB:
    required: true
    description: ""
  RESOURCE_GROUP:
    required: true
    description: ""
  CONTAINER_REGISTRY:
    required: true
    description: ""
  SERVICE_PRINCIPAL_ID:
    required: true
    description: ""
  SERVICE_PRINCIPAL_PASSWORD:
    required: true
    description: ""
  TENANT:
    required: true
    description: ""
  SUBSCRIPTION:
    required: true
    description: ""

runs:
  using: "composite"
  steps:
    - name: Log in to Azure
      uses: ./reusable-workflow/.github/actions/azure-login
      with:
        SERVICE_PRINCIPAL_ID: ${{ inputs.SERVICE_PRINCIPAL_ID }}
        SERVICE_PRINCIPAL_PASSWORD: ${{ inputs.SERVICE_PRINCIPAL_PASSWORD }}
        TENANT: ${{ inputs.TENANT }}
        SUBSCRIPTION: ${{ inputs.SUBSCRIPTION }}

    - name: Deploy new revision of init Container App Job
      uses: azure/cli@v2
      with:
        inlineScript: |
          echo Creating new revision of ${{ inputs.INIT_CONTAINER_APP_JOB }} Container App Job
          az containerapp job update \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --name ${{ inputs.INIT_CONTAINER_APP_JOB }} \
            --image ${{ inputs.CONTAINER_REGISTRY }}/${{ inputs.INIT_IMAGE }}:${{ github.run_id }}

    - name: Run init job
      uses: azure/cli@v2
      id: run-init
      with:
        inlineScript: |
          get_execution_status() {
            executionName=$1
            local executionStatus=$(az containerapp job execution list \
              --resource-group ${{ inputs.RESOURCE_GROUP }} \
              --name ${{ inputs.INIT_CONTAINER_APP_JOB }} \
              | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
            echo "$executionStatus"
          }

          echo Starting init Container App Job...
          az containerapp job start \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --name ${{ inputs.INIT_CONTAINER_APP_JOB }}

          executionName=$(az containerapp job execution list \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --name ${{ inputs.INIT_CONTAINER_APP_JOB }} \
            | jq -r '.[] | select(.properties.status | contains("Running")) | .name')
          echo "EXECUTION_NAME=$executionName" >> $GITHUB_OUTPUT

          executionStatus=$(get_execution_status $executionName)
          echo "Execution status is $executionStatus"
          while [[ "$executionStatus" != "Running" ]]
          do
            echo Waiting for job execution $executionName to start...
            sleep 5
            executionStatus=$(get_execution_status $executionName)
            echo "Execution status is $executionStatus"
          done

          az containerapp job logs show \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --name ${{ inputs.INIT_CONTAINER_APP_JOB }} \
            --execution $executionName \
            --container init \
            --format text \
            --follow true

          executionStatus=$(get_execution_status $executionName)
          echo "Execution status is $executionStatus"

          if [[ "$executionStatus" == "Succeeded" ]]
          then
            echo "Execution $executionName succeeded!"
          else
            echo "Execution $executionName failed!"
            exit 1
          fi

    - name: Stop execution 
      uses: azure/cli@v2
      if: always()
      continue-on-error: true
      with:
        inlineScript: |
          echo Stopping execution ${{ steps.run-init.outputs.EXECUTION_NAME }}
          az containerapp job stop \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --name ${{ inputs.INIT_CONTAINER_APP_JOB }} \
            --job-execution-name ${{ steps.run-init.outputs.EXECUTION_NAME }}