name: "Build and Push Pimcore Image"
description: "Builds a Pimcore Docker image, and optionally pushes it to a Container Registry"
inputs:
  CONTAINER_REGISTRY:
    required: false
    description: "The Docker registry to push the image to"
  PUSH:
    required: false
    description: "Whether to push the image to the registry"
    default: "true"
  CACHE_FROM:
    required: false
    description: "Defines where to pull cached Docker layers from"
  CACHE_TO:
    required: false
    description: "Defines where to push cached Docker layers to"
  TAGS:
    required: false
    description: "Defines the tags to associate with the image"
  DOCKERFILE_PATH:
    required: true
    description: "The path (relative to the project's root) of the Dockerfile used to build image"
  DOCKERFILE_TARGET:
    required: true
    description: "The Docker target to use when building the image"
  IMAGE:
    required: true
    description: "The name of the Docker image to build"
  PIMCORE_ROOT:
    required: true
    description: "The path (relative to the project's root) in which the Pimcore files are stored (e.g. config, src, etc)"
  PIMCORE_ENTERPRISE_TOKEN:
    required: true
    description: "(Optional) The value of your project's Pimcore Enterprise Token"
  TORQ_GITHUB_TOKEN:
    required: true
    description: "(Optional) A GitHub access token used to access private GitHub repositories"
  NPM_BUILD:
    required: false
    default: "false"
    description: "Whether an NPM build should be run prior to building the PHP image"
  NPM_RUN_CMD:
    required: false
    description: "The NPM command that should be run prior to building the PHP image"
  NPM_SPA:
    required: false
    description: "Whether the NPM build results in a single-page application"
  SPA_TWIG:
    required: false
    description: "The path to the Twig file where the result of the NPM single-page application build should be copied"
  RECAPTCHA_CLIENT_KEY:
    required: false
    description: "(Optional) A client key used when building NPM frontends that require ReCAPTCHA"
  BUILD_SECRETS:
    required: false
    description: "JSON string containing build secrets to be passed to Docker build"

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      if: inputs.NPM_BUILD == 'true'
      with:
        node-version: 20
        cache: "npm"
        cache-dependency-path: ${{ inputs.PIMCORE_ROOT }}/frontend/package-lock.json

    - name: Cache node modules
      if: inputs.NPM_BUILD == 'true'
      id: cache-npm
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Perform npm build
      shell: bash
      if: inputs.NPM_BUILD == 'true'
      env:
        CI: "" # required to ensure warnings aren't treated as errors
      run: |
        # If the application supports ReCAPTCHA, ensure the client key is present so that it is available for the constructed SPA HTML file
        export VITE_RECAPTCHA_CLIENT_KEY=${{ inputs.RECAPTCHA_CLIENT_KEY }}
        npm --prefix ${{ inputs.PIMCORE_ROOT }}/frontend ci --legacy-peer-deps
        npm --prefix ${{ inputs.PIMCORE_ROOT }}/frontend run ${{ inputs.NPM_RUN_CMD }}
        if ${{ inputs.NPM_SPA }}
        then
          mv ${{ inputs.PIMCORE_ROOT }}/frontend/build/index.html ${{ inputs.PIMCORE_ROOT }}/templates/${{ inputs.SPA_TWIG }}
          mv ${{ inputs.PIMCORE_ROOT }}/frontend/build/* ${{ inputs.PIMCORE_ROOT }}/public/
        fi

    - name: Format build secrets
      id: format-secrets
      shell: bash
      run: |
        JSON_INPUT='${{ secrets.BUILD_SECRETS }}'
        if [ "$JSON_INPUT" != "" ]; then
          echo "formatted=$(echo '$JSON_INPUT' | jq -r 'to_entries|map(\"\(.key)=\(.value)\")|join(\"\n\")')" >> $GITHUB_OUTPUT
        else
          echo "formatted=" >> $GITHUB_OUTPUT
        fi

    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ inputs.DOCKERFILE_PATH }}
        target: ${{ inputs.DOCKERFILE_TARGET }}
        # During the build, the kernel secret's value is not important but it still must be set
        secrets: |
          pimcore-enterprise-token=${{ inputs.PIMCORE_ENTERPRISE_TOKEN }}            
          torq-github-token=${{ inputs.TORQ_GITHUB_TOKEN }}
          kernel-secret=secret
          ${{ steps.format-secrets.outputs.formatted }}
        push: ${{ fromJSON(inputs.PUSH) }}
        cache-from: ${{ inputs.CACHE_FROM }}
        cache-to: ${{ inputs.CACHE_TO }}
        tags: ${{ inputs.TAGS }}