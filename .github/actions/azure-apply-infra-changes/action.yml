name: "Azure Apply Infrastructure Changes"
description: "Applies Azure infrastructure updates based on the given parameters file"
inputs:
  TENANT:
    required: true
    description: "ID of the Azure tenant to log in to"
  SERVICE_PRINCIPAL_ID:
    required: true
    description: "The ID of the Service Principal in Azure that will be used to log in"
  SERVICE_PRINCIPAL_PASSWORD:
    required: true
    description: "The password for the Service Principal in Azure"
  AZURE_DIRECTORY:
    required: true
    description: "Directory containing the Azure parameters file"
  AZURE_IMAGE_TAG:
    required: true
    description: "Tag to use when pulling the TORQ Azure provisioning image"

runs:
  using: "composite"
  steps:
    - name: Determine if any files under the Azure directory have changed
      id: changed-azure-files
      uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
      with:
        files: ${{ inputs.AZURE_DIRECTORY }}/*.json
    
    - name: Echo if no files changed
      shell: bash
      if: steps.changed-azure-files.outputs.any_changed == 'false'
      run: echo "No files in ${{ inputs.AZURE_DIRECTORY }} have changed, so nothing to do!"

    - name: Apply infrastructure changes
      shell: bash
      id: apply
      if: steps.changed-azure-files.outputs.any_changed == 'true'
      env:
          CHANGED_FILES: ${{ steps.changed-azure-files.outputs.all_changed_files }}
      run: |
        echo Changed files: $CHANGED_FILES
        for file in ${CHANGED_FILES[@]}; do
          echo "Something"
        done
        for file in ${CHANGED_FILES[@]}; do
          echo "Pulling and starting Azure container based on file $file..."
          docker run \
            --name azure \
            -d \
            -v ./$file:/azure/$file \
            ghcr.io/torqit/pimcore-azure-provisioning:${{ inputs.AZURE_IMAGE_TAG }}

          touch .env
          TENANT=$(jq -r '.parameters.tenantId.value' ./$file >> .env
          SERVICE_PRINCIPAL_ID=${{ inputs.SERVICE_PRINCIPAL_ID }} >> .env
          SERVICE_PRINCIPAL_PASSWORD=${{ inputs.SERVICE_PRINCIPAL_PASSWORD }} >> .env
          echo "Logging into Azure via container..."
          docker exec \
            --env-file .env \
            azure \
              az login --tenant $TENANT \
                --service-principal \
                  --username $SERVICE_PRINCIPAL_ID \
                  --password $SERVICE_PRINCIPAL_PASSWORD

          echo "Applying Azure infrastructure changes based on file $file..."
          docker exec \
            azure \
              ./provision-quick.sh $file
        done

    - name: Stop deployment in case of failure/cancellation
      shell: bash
      if: always()
      continue-on-error: true
      env:
        CHANGED_FILES: ${{ steps.changed-azure-files.outputs.all_changed_files }}
      run: |
        if [ ${{ steps.apply.outcome }} == 'failure' ] || [ ${{ steps.apply.outcome }} == 'cancelled' ]; then
          echo Changed files: $CHANGED_FILES
          for file in ${CHANGED_FILES[@]}; do
            echo "Something"
          done
          for file in ${CHANGED_FILES[@]}; do
            echo "Stopping deployment main based on file $file..."
            RESOURCE_GROUP=$(jq -r '.parameters.resourceGroupName.value' ${{ inputs.AZURE_DIRECTORY }}/$file >> .env
            set +e
            docker exec \
              --env-file .env \
              azure \
                az deployment group cancel \
                  --resource-group $RESOURCE_GROUP \
                  --name main
            set -e
          done
        else
          echo "No deployments to stop"
        fi

    - name: Clean up container
      shell: bash
      if: always()
      run: docker rm --force azure