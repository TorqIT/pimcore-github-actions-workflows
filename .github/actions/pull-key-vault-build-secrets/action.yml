name: ''
description: ''
inputs:
  TENANT:
    required: true
    description: ""
  SERVICE_PRINCIPAL_ID:
    required: true
    description: ""
  SERVICE_PRINCIPAL_PASSWORD:
    required: true
    description: ""
  RESOURCE_GROUP:
    required: true
    description: ""
  KEY_VAULT:
    required: true
    description: ""
outputs:
  kernel-secret:
    description: "Symfony kernel secret"
    value: ${{ steps.secrets.outputs.kernel-secret }}
  pimcore-enterprise-token:
    description: "Pimcore Enterprise token"
    value: ${{ steps.secrets.outputs.pimcore-enterprise-token }}
  torq-github-token:
    description: "TORQ GitHub token"
    value: ${{ steps.secrets.outputs.torq-github-token }}
  

runs:
  using: "composite"
  steps:
    - name: Log into Azure CLI
      uses: azure/cli@v2
      with:
        inlineScript: |
          echo Logging into Azure...
          az login \
            --tenant ${{ inputs.TENANT }} \
            --service-principal \
            --username ${{ inputs.SERVICE_PRINCIPAL_ID }} \
            --password ${{ inputs.SERVICE_PRINCIPAL_PASSWORD }}
          
    - name: Add temporary network rule for this runner to Key Vault's firewall
      uses: azure/cli@v2
      with:
        inlineScript: |
          echo Adding temporary network rule for this runner to the Key Vault firewall...
          az keyvault network-rule add \
            --name ${{ inputs.KEY_VAULT }} \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --ip-address $(curl ipinfo.io/ip)

    - name: Pull build-time secrets from Key Vault
      uses: azure/cli@v2
      id: secrets
      with:
        inlineScript: |
          secrets=( kernel-secret pimcore-enterprise-token torq-github-token )
          for secretName in "${secrets[@]}"
          do
            echo Pulling $secretName from Key Vault...
            secretExists=$(az keyvault secret list \
              --vault-name ${{ inputs.KEY_VAULT }}  \
              --query "contains([].id, 'https://${{ inputs.KEY_VAULT }}.vault.azure.net/secrets/$secretName')")
            if [ $secretExists == true ]; then
              secretValue=$(az keyvault secret show \
                --name $secretName \
                --vault-name ${{ inputs.KEY_VAULT }} \
                --query value -o tsv)
              # echo "::add-mask::$secretValue" 
              echo "$secretName=$secretValue" >> $GITHUB_ENV
            else
              echo "::warning Secret $secretName not found in Key Vault"
              echo "$secretName=" >> $GITHUB_ENV
            fi
          done

    - name: Always remove network rule for this runner from Key Vault's firewall...
      if: always()
      uses: azure/cli@v2
      with: 
        inlineScript: |
          echo Removing network rule for this runner from the Key Vault firewall...
          az keyvault network-rule remove \
            --name ${{ inputs.KEY_VAULT }} \
            --resource-group ${{ inputs.RESOURCE_GROUP }} \
            --ip-address $(curl ipinfo.io/ip)